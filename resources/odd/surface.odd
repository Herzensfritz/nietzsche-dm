<?xml-model href="teipublisher_odds.xsd"?><TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>Surface</title>
            </titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify
                        it under the terms of the GNU General Public License as published by
                        the Free Software Foundation, either version 3 of the License, or
                        (at your option) any later version.</p>
                    <p>This program is distributed in the hope that it will be useful,
                        but WITHOUT ANY WARRANTY; without even the implied warranty of
                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        GNU General Public License for more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Generated by <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <tagsDecl>
                <rendition source="surface.css"/>
            </tagsDecl>
        </encodingDesc>
        <revisionDesc>
            <change when="2023-12-13+01:00">Initial version</change>
        </revisionDesc>
    </teiHeader>
    <text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="surface" source="teipublisher.odd"> 
        <elementSpec ident="pb" mode="change"/>
        <elementSpec ident="hi" mode="change">
                    <model predicate="@rend and parent::restore" behaviour="pass-through">
            <param name="rend" value="@rend"/>
            <param name="restore" value="concat('restoreBy',parent::restore/@type)"/>
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve">
                            <span class="[[rend]] [[restore]]">[[content]]</span>
                        </pb:template>
        </model>
                    <model predicate="@rend='underline'" behaviour="inline"/>
                    <model predicate="@rend='doubleUnderline'" behaviour="inline"/>
                    <model predicate="@rend='latin'" behaviour="pass-through">
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><span class="latin">[[content]]</span></pb:template>
        </model>
                </elementSpec>
    <elementSpec ident="note" mode="change">
        <model predicate="@type = 'authorial'" behaviour="pass-through">
            <param name="hand" value="if(@hand) then (concat('hand ', substring-after(@hand, '#'))) else ()"/>
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><span class="[[hand]]">[[content]]</span></pb:template>
        </model>
        <model predicate="@type = 'editorial' and @targetEnd" behaviour="pass-through">
            <param name="startLine" value="id(substring-after(@target, '#'), root($parameters?root))/@n"/>
            <param name="content" value="."/>
            <param name="startTarget" value="substring-after(@target, '#')"/>
            <param name="endLine" value="id(substring-after(@targetEnd, '#'), root($parameters?root))/@n"/>
            <param name="endTarget" value="substring-after(@targetEnd, '#')"/>
            <pb:template xmlns="" xml:space="preserve"><div><pb-highlight key="[[startTarget]]" highlight-self="highlight-self" duration="5000"><span style="color: blue;">[[startLine]]</span></pb-highlight>-<pb-highlight key="[[endTarget]]" highlight-self="highlight-self" duration="5000"><span style="color: blue;">[[endLine]]</span></pb-highlight>: <span class="note" style="margin-left: 2px;">[[content]]</span> </div></pb:template>
        </model>
        <model predicate="@type = 'editorial'" behaviour="pass-through">
            <param name="line" value="id(substring-after(@target, '#'), root($parameters?root))/@n"/>
            <param name="content" value="."/>
            <param name="target" value="substring-after(@target, '#')"/>
            <pb:template xmlns="" xml:space="preserve"><div><pb-highlight key="[[target]]" highlight-self="highlight-self" duration="5000"><span style="color: blue;">[[line]]</span></pb-highlight>: <span class="note" style="margin-left: 2px;">[[content]]</span> </div></pb:template>
        </model>
                    <model behaviour="omit"/>
                </elementSpec>
                <elementSpec ident="noteGrp" mode="add"/>
            <elementSpec ident="lb" mode="change">
                    <model behaviour="pass-through" useSourceRendition="true">
            <pb:template xmlns="" xml:space="preserve"><span>Â¶</span></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="p" mode="change"/>
                <elementSpec ident="sourceDoc" mode="add"/>
                <elementSpec ident="text" mode="change"/>
                <elementSpec ident="div2" mode="add"/>
                <elementSpec ident="body" mode="change"/>
        <elementSpec ident="surface" mode="add">
            <model predicate="@type='relative'" behaviour="body">
            <param name="content" value="."/>
            <param name="id" value="@xml:id"/>
            <param name="pb" value="replace(@start, '#', '')"/>
            <param name="style" value="@style"/>
            <param name="url" value="substring-before(id(substring-after(@facs,'#'), root($parameters?root))/graphic/@url,'/full')"/>
            <param name="hand" value="let $pbCorresp := id(substring-after(@start,'#'), root($parameters?root))/@corresp  let $correspTok := if($pbCorresp) then (tokenize($pbCorresp)) else () let $tokLength := count($correspTok) let $lastTok := if($tokLength gt 0) then ($correspTok[$tokLength]) else () let $handNote := if ($lastTok) then (id(substring-after($lastTok, '#'), root($parameters?root))) else () return if ($handNote and $handNote/local-name() = 'handNote') then (concat('hand ',substring-after($lastTok, '#'))) else ()"/>
            <pb:template xmlns="" xml:space="preserve">
                            <pb-facs-link emit="transcription" facs="[[url]]" style="float: right; margin-top: -2em;">[[pb]]</pb-facs-link>                           
                            <div id="[[id]]" class="transkriptionField [[hand]]" style="[[style]]">
                                [[content]]
                            </div>
                        </pb:template>
        </model>
    </elementSpec>
    <elementSpec ident="line" mode="add">
        <model predicate="ends-with(parent::zone/@type, 'Block') and parent::zone/parent::surface and @start" behaviour="pass-through">
            <param name="id" value="@xml:id"/>
            <param name="style" value="@style"/>
            <param name="n" value="@n"/>
            <param name="hand" value="if(@hand) then (concat('hand ', substring-after(@hand, '#'))) else ()"/>
            <param name="rend" value="@rend"/>
            <param name="target" value="substring-after(@start, '#')"/>
            <pb:template xmlns="" xml:space="preserve"><div id="[[id]]" class="line" style="[[style]]">
  <span class="lnr"><pb-highlight key="[[target]]" duration="5000">[[n]]</pb-highlight>:</span>
  <span class="[[hand]] [[rend]]" style="[[spanStyle]]">[[content]]</span>
</div></pb:template>
        </model>
    <model predicate="ends-with(parent::zone/@type, 'Block') and parent::zone/parent::surface and not(@start)" behaviour="pass-through">
            <param name="id" value="@xml:id"/>
            <pb:template xmlns="" xml:space="preserve"><div id="[[id]]" class="line empty">
</div></pb:template>
        </model>
        <model predicate="parent::zone/parent::zone and not(ends-with(parent::zone/@type, 'Block'))" behaviour="pass-through">
            <param name="n" value="@n"/>
            <param name="style" value="@style"/>
            <param name="id" value="@xml:id"/>
            <param name="content" value="."/>
            <param name="isMarginLeft" value="if (contains(parent::zone/@type, 'zone')) then ('marginLeft') else ()"/>
            <param name="spanStyle" value="parent::zone/@style"/>
            <param name="hand" value="if(@hand) then (concat('hand ', substring-after(@hand, '#'))) else ()"/>
            <param name="rend" value="@rend"/>
            <param name="target" value="substring-after(@start, '#')"/>
            <pb:template xmlns="" xml:space="preserve"><div id="[[id]]" class="zoneLine" style="[[style]]">
  <span class="lnr"><pb-highlight key="[[target]]" duration="5000">[[n]]</pb-highlight>:</span>
  <span class="[[isMarginLeft]] [[hand]] [[rend]]" style="[[spanStyle]]">[[content]]</span>
</div></pb:template>
        </model>
                </elementSpec>
            <elementSpec ident="zone" mode="add">
                    <model predicate="parent::line and not(ends-with(@type, 'Block'))" behaviour="pass-through">
            <param name="id" value="@xml:id"/>
            <param name="content" value="."/>
            <param name="class" value="@type"/>
            <param name="style" value="@style"/>
            <pb:template xmlns="" xml:space="preserve"><span id="[[id]]" style="[[style]]" class="[[class]]" data-debug="0">
  [[content]]
</span></pb:template>
        </model>
                    <model predicate="@xml:id and (empty(@type) or ends-with(@type, 'Block'))" behaviour="pass-through">
            <param name="zone" value="substring-after(@start, '#')"/>
            <param name="style" value="@style"/>
            <param name="class" value="if (ends-with(@type,'Block') and not(starts-with(@type, 'text'))) then (concat(@type, ' textBlock')) else (@type)"/>
            <param name="content" value="."/>
            <param name="id" value="@xml:id"/>
            <param name="hand" value="if(@hand) then (concat('hand ', substring-after(@hand, '#'))) else ()"/>
            <pb:template xmlns="" xml:space="preserve"><div id="[[id]]" style="[[style]]" class="[[class]] [[hand]]" debug-msg="test" data-debug="1">
  [[content]]
</div></pb:template>
        </model>
                    <model predicate="parent::zone and not(ends-with(@type, 'Block')) and line" behaviour="pass-through">
            <param name="id" value="@xml:id"/>
            <param name="class" value="@type"/>
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><div id="[[id]]" class="[[class]]">
  [[content]]
</div></pb:template>
        </model>
                    <model predicate="parent::zone and not(ends-with(@type, 'Block')) and not(line)" behaviour="pass-through">
            <param name="id" value="@xml:id"/>
            <param name="class" value="@type"/>
            <param name="content" value="."/>
            <param name="style" value="@style"/>
            <pb:template xmlns="" xml:space="preserve"><div id="[[id]]" class="[[class]]" style="[[style]]">
  [[content]]
</div></pb:template>
        </model>
                </elementSpec>
    <elementSpec ident="add" mode="change">
                    <model predicate="@place = 'superimposed' and (parent::fw)" behaviour="omit">
            <param name="id" value="replace(@corresp, '#', '')"/>
            <param name="hand" value="@hand"/>
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><span class="trigger popover" id="[[id]]" data-debug="add1"><span class="[[hand]]">[[content]]</span></span></pb:template>
        </model>
                    <model predicate="@place = 'superimposed' and add[@place='superimposed']" behaviour="inline"/>
                    <model predicate="@place = 'superimposed' and parent::del[@rend and @hand]" behaviour="pass-through">
            <param name="id" value="if (@xml:id) then (@xml:id) else (substring-after(@corresp, '#'))"/>
            <param name="deleteCls" value="concat(parent::del/@rend, replace(parent::del/@hand, '#', '-'))"/>
            <param name="hand" value="if(@hand) then (concat('hand ', substring-after(@hand, '#'))) else ()"/>
            <param name="content" value="."/>
            <param name="instant" value="if (@instant = 'true') then ('instantaneous') else ()"/>
            <pb:template xmlns="" xml:space="preserve"><span class="trigger popover" id="[[id]]" data-debug="add2">
                <span class="inline [[hand]] [[instant]] [[deleteCls]]">[[content]]</span></span></pb:template>
        </model>
                    <model predicate="@place = 'superimposed' and parent::del[@rend]" behaviour="pass-through">
            <param name="id" value="if (@xml:id) then (@xml:id) else (substring-after(@corresp, '#'))"/>
            <param name="deleteCls" value="parent::del/@rend"/>
            <param name="hand" value="if(@hand) then (concat('hand ', substring-after(@hand, '#'))) else ()"/>
            <param name="content" value="."/>
            <param name="instant" value="if (@instant = 'true') then ('instantaneous') else ()"/>
            <pb:template xmlns="" xml:space="preserve"><span class="trigger popover" id="[[id]]" data-debug="add3">
                <span class="inline [[hand]] [[instant]] [[deleteCls]]">[[content]]</span></span></pb:template>
        </model>
                    <model predicate="@place = 'superimposed'" behaviour="pass-through">
            <param name="id" value="if (@xml:id) then (@xml:id) else (substring-after(@corresp, '#'))"/>
            <param name="hand" value="if(@hand) then (concat('hand ', substring-after(@hand, '#'))) else ()"/>
            <param name="content" value="."/>
            <param name="instant" value="if (@instant = 'true') then ('instantaneous') else ()"/>
            <pb:template xmlns="" xml:space="preserve"><span class="trigger popover" id="[[id]]" data-debug="add4"><span class="inline [[hand]] [[instant]]">[[content]]</span></span></pb:template>
        </model>
                    <model predicate="parent::metamark[following-sibling::del/@cause = concat('#', @xml:id) or preceding-sibling::del/@cause = concat('#', @xml:id)] and (@place='above' or @place='below')" behaviour="pass-through">
            <param name="metamarkClass" value="if (parent::metamark/@rend) then (concat(parent::metamark/@rend, 'insertion-', @place)) else (concat('insMinsertion-', @place))"/>
            <param name="metamarkStyle" value="parent::metamark/@style"/>
            <param name="hand" value="if(@hand) then (concat('hand ', substring-after(@hand, '#'))) else ()"/>
            <param name="class" value="@place"/>
            <param name="content" value="."/>
            <param name="id" value="parent::metamark/@xml:id"/>
            <param name="overwritten" value="if(parent::metamark/following-sibling::del[1]/@cause = concat('#', parent::metamark/@xml:id)) then (parent::metamark/following-sibling::del[1]/text()) else (parent::metamark/preceding-sibling::del[1]/text())"/>
            <param name="instant" value="if (@instant = 'true') then ('instantaneous') else ()"/>
            <pb:template xmlns="" xml:space="preserve"><span class="trigger popover" id="[[id]]">[[overwritten]]</span><span class="[[metamarkClass]] [[hand]]" style="[[metamarkStyle]]">
  <span class="[[class]] [[instant]]">[[content]]</span>
</span></pb:template>
        </model>
                    <model predicate="parent::metamark and (@place='above' or @place='below') and anchor[@corresp]" behaviour="pass-through">
            <param name="highlightKey" value="substring-after(anchor[1]/@corresp, '#')"/>
            <param name="metamarkClass" value="if (parent::metamark/@rend) then (concat(parent::metamark/@rend, 'insertion-', @place)) else (concat('insMinsertion-', @place))"/>
            <param name="metamarkStyle" value="parent::metamark/@style"/>
            <param name="hand" value="if(@hand) then (concat('hand ', substring-after(@hand, '#'))) else ()"/>
            <param name="class" value="@place"/>
            <param name="style" value="@style"/>
            <param name="content" value="."/>
            <param name="instant" value="if (@instant = 'true') then ('instantaneous') else ()"/>
            <pb:template xmlns="" xml:space="preserve"><pb-highlight key="[[highlightKey]]" duration="5000"><span class="[[metamarkClass]] [[hand]]" style="[[metamarkStyle]]">
  <span class="[[class]] [[instant]]" style="[[style]]">[[content]]</span>
</span></pb-highlight></pb:template>
        </model>
                    <model predicate="parent::metamark and (@place='above' or @place='below')" behaviour="pass-through">
            <param name="metamarkClass" value="if (parent::metamark/@rend) then (concat(parent::metamark/@rend, 'insertion-', @place)) else (concat('insMinsertion-', @place))"/>
            <param name="metamarkStyle" value="parent::metamark/@style"/>
            <param name="hand" value="if(@hand) then (concat('hand ', substring-after(@hand, '#'))) else ()"/>
            <param name="class" value="@place"/>
            <param name="style" value="@style"/>
            <param name="content" value="."/>
            <param name="instant" value="if (@instant = 'true') then ('instantaneous') else ()"/>
            <pb:template xmlns="" xml:space="preserve"><span class="[[metamarkClass]] [[hand]]" style="[[metamarkStyle]]">
  <span class="[[class]] [[instant]]" style="[[style]]">[[content]]</span>
</span></pb:template>
        </model>
                    <model predicate="not(parent::metamark) and (@place='above' or @place='below') and anchor[@corresp]" behaviour="pass-through">
            <param name="highlightKey" value="substring-after(anchor[1]/@corresp, '#')"/>
            <param name="hand" value="if(@hand) then (concat('hand ', substring-after(@hand, '#'))) else ()"/>
            <param name="parentClass" value="concat('insertion-', @place)"/>
            <param name="class" value="@place"/>
            <param name="style" value="@style"/>
            <param name="content" value="."/>
            <param name="instant" value="if (@instant = 'true') then ('instantaneous') else ()"/>
            <pb:template xmlns="" xml:space="preserve"><pb-highlight key="[[highlightKey]]" duration="5000"><span class="[[parentClass]] [[hand]]">
  <span class="[[class]] [[instant]]" style="[[style]]">[[content]]</span>
</span></pb-highlight></pb:template>
        </model>
                    <model predicate="not(parent::metamark) and (@place='above' or @place='below')" behaviour="pass-through">
            <param name="hand" value="if(@hand) then (concat('hand ', substring-after(@hand, '#'))) else ()"/>
            <param name="parentClass" value="concat('insertion-', @place)"/>
            <param name="class" value="@place"/>
            <param name="style" value="@style"/>
            <param name="content" value="."/>
            <param name="instant" value="if (@instant = 'true') then ('instantaneous') else ()"/>
            <pb:template xmlns="" xml:space="preserve"><span class="[[parentClass]] [[hand]]">
  <span class="[[class]] [[instant]]" style="[[style]]">[[content]]</span>
</span></pb:template>
        </model>
                    <model predicate="@place = 'inline'  and anchor[@corresp]" behaviour="pass-through">
            <param name="highlightKey" value="substring-after(anchor[1]/@corresp, '#')"/>
            <param name="hand" value="if(@hand) then (concat('hand ', substring-after(@hand, '#'))) else ()"/>
            <param name="content" value="."/>
            <param name="instant" value="if (@instant = 'true') then ('instantaneous') else ()"/>
            <param name="rend" value="@rend"/>
            <pb:template xmlns="" xml:space="preserve"><pb-highlight key="[[highlightKey]]" duration="5000"><span class="inline [[instant]] [[hand]] [[rend]]">[[content]]</span></pb-highlight></pb:template>
        </model>
                    <model predicate="@place = 'inline' or empty(@place)" behaviour="pass-through">
            <param name="hand" value="if(@hand) then (concat('hand ', substring-after(@hand, '#'))) else ()"/>
            <param name="content" value="."/>
            <param name="instant" value="if (@instant = 'true') then ('instantaneous') else ()"/>
            <param name="rend" value="@rend"/>
            <pb:template xmlns="" xml:space="preserve"><span class="inline [[instant]] [[hand]] [[rend]]">[[content]]</span></pb:template>
        </model>
                    <model predicate="@hand" behaviour="pass-through">
            <param name="hand" value="if(@hand) then (concat('hand ', substring-after(@hand, '#'))) else ()"/>
            <param name="content" value="."/>
            <param name="instant" value="if (@instant = 'true') then ('instantaneous') else ()"/>
            <pb:template xmlns="" xml:space="preserve"><span class="[[hand]] inline [[instant]]">[[content]]</span></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="subst" mode="add"/>
            <elementSpec ident="metamark" mode="add">
                    <model predicate="@target and @corresp" behaviour="pass-through">
            <param name="content" value="."/>
            <param name="target" value="let $corresp := @corresp let $target := if (contains(@target, ' ')) then (substring-before(@target, ' ')) else (@target) return  if (following::metamark[@corresp = $target]) then (concat($corresp,$target)) else (concat($target, $corresp))"/>
            <pb:template xmlns="" xml:space="preserve"><pb-highlight key="[[target]]" highlight-self="highlight-self" duration="5000">[[content]]</pb-highlight></pb:template>
        </model>
                    <model predicate="@target" behaviour="pass-through">
            <param name="content" value="."/>
            <param name="target" value="substring-after(if (contains(@target, ' ')) then (substring-before(@target, ' ')) else (@target), '#')"/>
            <pb:template xmlns="" xml:space="preserve"><pb-highlight key="[[target]]" highlight-self="highlight-self" duration="5000">[[content]]</pb-highlight></pb:template>
        </model>
                </elementSpec>
    <elementSpec ident="del" mode="change">
                    <model predicate=" (@rend = 'erased' or @rend = 'overwritten') and parent::fw[not(add)]" behaviour="inline"/>
                    <model predicate=" (@rend = 'erased' or @rend = 'overwritten') and parent::subst" behaviour="omit"/>
                    <model predicate=" (@rend = 'erased' or @rend = 'overwritten') and parent::fw[add[@place=&#34;superimposed&#34;]]" behaviour="pass-through" cssClass="popover">
            <param name="id" value="replace(@cause, '#', '')"/>
            <param name="key" value="concat('myapp.',@rend)"/>
            <param name="alternate" value="."/>
            <param name="place" value="replace(parent::fw/@place, '#','')"/>
            <param name="hand" value="replace(parent::fw/@hand, '#','')"/>
            <param name="content" value="parent::fw/add[@place=&#34;superimposed&#34;]/text()"/>
            <param name="parentKey" value="concat('myapp.hand.',replace(parent::fw/@hand, '#',''))"/>
            <pb:template xmlns="" xml:space="preserve"><span id="[[id]]" class="[[place]] [[hand]] trigger popover" data-debug="3">
         [[content]]
      </span> 
<pb-popover theme="material" for="[[id]]"><p>
                    <span style="font-style: italic; margin: 2px;">
                          (<pb-i18n key="[[parentKey]]">
                            key not found: [[parentKey]]
                          </pb-i18n>)</span>
                        <span style="font-style: italic;">
                          <pb-i18n key="[[key]]">
                            Ã¼berschrieben
                          </pb-i18n>:</span>
                        <span class="transkriptionField small [[hand]]">[[alternate]]</span></p></pb-popover></pb:template>
        </model>
                    <model predicate=" (@rend = 'erased' or @rend = 'overwritten') and parent::add[@place='superimposed']" behaviour="pass-through" cssClass="popover">
            <param name="id" value="replace(@cause, '#', '')"/>
            <param name="key" value="concat('myapp.',@rend)"/>
            <param name="alternate" value="."/>
            <param name="hand" value="replace(@hand, '#','')"/>
            <param name="under" value="parent::add/preceding::del[@cause][1]/text()"/>
            <param name="underKey" value="concat('myapp.',parent::add/preceding::del[@cause][1]/@rend)"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover theme="material" for="[[id]]"><p>
                        <span style="font-style: italic;">
                          <pb-i18n key="[[key]]">
                            Ã¼berschrieben
                          </pb-i18n>:</span>
                        <span style="margin-left: 10px; margin-right: 10px;" class="transkriptionField small [[hand]]">[[alternate]]</span> 
   <pb-i18n key="[[underKey]]">key not found: [[underKey]]</pb-i18n>: 
                        <span style="margin-left: 10px;" class="transkriptionField small [[hand]]">[[under]]</span> 
 
</p></pb-popover></pb:template>
        </model>
                    <model predicate=" (@rend = 'erased' or @rend = 'overwritten') and parent::sic" behaviour="pass-through">
            <param name="id" value="replace(@cause, '#', '')"/>
            <param name="key" value="concat('myapp.',@rend)"/>
            <param name="alternate" value="."/>
            <param name="hand" value="replace(@hand, '#','')"/>
            <pb:template xmlns="" xml:space="preserve"><span style="position:relative"><span class="overwrittenSic"><span style="font-style: italic; ">
                          <pb-i18n key="[[key]]">
                            Ã¼berschrieben
                          </pb-i18n>:</span>
                        <span class="transkriptionField small [[hand]]">[[alternate]]</span></span></span></pb:template>
        </model>
                    <model predicate=" (@rend = 'erased' or @rend = 'overwritten')" behaviour="pass-through" cssClass="popover">
            <param name="id" value="replace(@cause, '#', '')"/>
            <param name="key" value="concat('myapp.',@rend)"/>
            <param name="alternate" value="."/>
            <param name="hand" value="replace(@hand, '#','')"/>
            <param name="style" value="()"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover theme="material" for="[[id]]" style="[[style]]"><p>
                        <span style="font-style: italic;">
                          <pb-i18n key="[[key]]">
                            Ã¼berschrieben
                          </pb-i18n>:</span>
                        <span class="transkriptionField small [[hand]]">[[alternate]]</span></p></pb-popover></pb:template>
        </model>
                    <model predicate="@rend and @hand" behaviour="pass-through">
            <param name="content" value="."/>
            <param name="deleteCls" value="concat(@rend, replace(@hand, '#', '-'))"/>
            <param name="id" value="generate-id()"/>
            <param name="key" value="concat('myapp.',concat(@rend, replace(@hand, '#', '-')))"/>
            <param name="innerContent" value="for $item in ./(*|text())     return if ($item/local-name() = 'metamark') then () else ($item)"/>
            <param name="disabled" value="if($parameters?del = 'off') then ('disabled') else ()"/>
            <pb:template xmlns="" xml:space="preserve"><span id="[[id]]" class="[[deleteCls]]">[[content]]</span><pb-popover theme="material" for="[[id]][[disabled]]">
  <span class="editor"><pb-i18n key="[[key]]">gestrichen</pb-i18n>:</span>[[innerContent]]</pb-popover></pb:template>
        </model>
                    <model predicate="@rend" behaviour="pass-through">
            <param name="content" value="."/>
            <param name="deleteCls" value="@rend"/>
            <param name="id" value="generate-id()"/>
            <param name="key" value="concat('myapp.',@rend)"/>
            <param name="innerContent" value="for $item in ./(*|text())     return if ($item/local-name() = 'metamark') then () else ($item)"/>
            <param name="disabled" value="if($parameters?del = 'off') then ('disabled') else ()"/>
            <pb:template xmlns="" xml:space="preserve"><span id="[[id]]" class="[[deleteCls]]">[[content]]</span><pb-popover theme="material" for="[[id]][[disabled]]">
  <span class="editor" data-debug="1"><pb-i18n key="[[key]]">gestrichen</pb-i18n>:</span>[[innerContent]]</pb-popover></pb:template>
        </model>
                    <model predicate="@hand" behaviour="pass-through">
            <param name="content" value="."/>
            <param name="deleteCls" value="concat('deleted', replace(@hand, '#', '-'))"/>
            <param name="id" value="generate-id()"/>
            <param name="key" value="concat('myapp.',concat('deleted', replace(@hand, '#', '-')))"/>
            <param name="innerContent" value="for $item in ./(*|text())     return if ($item/local-name() = 'metamark') then () else ($item)"/>
            <param name="disabled" value="if($parameters?del = 'off') then ('disabled') else ()"/>
            <pb:template xmlns="" xml:space="preserve"><span id="[[id]]" class="[[deleteCls]]">[[content]]</span><pb-popover theme="material" for="[[id]][[disabled]]">
  <span class="editor"><pb-i18n key="[[key]]">gestrichen</pb-i18n>:</span>[[innerContent]]</pb-popover></pb:template>
        </model>
                    <model behaviour="inline" cssClass="strikethrough"/>
                </elementSpec>
                <elementSpec ident="substJoin" mode="add">
                    <model predicate="following::add/@place = 'superimposed' and following::del and not(parent::fw) and not(matches(preceding::text()[1], '.*\s$'))" behaviour="inline">
            <outputRendition xml:space="preserve">
            margin-left: -0.2em;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="index" mode="add">
                    <model predicate="@indexName = 'choice'" behaviour="pass-through">
            <param name="content" value="let $start := . return $start/following-sibling:: node()[following::anchor[@xml:id = substring-after($start/@spanTo, '#')]]"/>
            <param name="alternate" value="id(substring-after(@corresp, '#'), root($parameters?root))"/>
            <param name="id" value="substring-after(@corresp, '#')"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover theme="material">
  <span slot="default" class="choice">[[content]]</span>
  <template slot="alternate"><p>[[alternate]]</p></template>
</pb-popover></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="text()" mode="add">
                    <model predicate="following::anchor[1]/@xml:id = substring-after(preceding::index[1]/@spanTo, '#')" behaviour="omit"/>
                    <model behaviour="text"/>
                </elementSpec>
                <elementSpec ident="fw" mode="change">
                    <model predicate="del and not(del[@cause])" behaviour="inline">
            <param name="place" value="@place"/>
            <param name="hand" value="if(@hand) then (concat('hand ', substring-after(@hand, '#'))) else ()"/>
            <param name="id" value="substring-after(@corresp, '#')"/>
            <param name="key" value="concat(&#34;myapp.hand.&#34;, substring-after(@hand, '#'))"/>
            <param name="content" value="."/>
            <param name="erased" value="concat(&#34;myapp.&#34;, del/@rend)"/>
            <pb:template xmlns="" xml:space="preserve"><span id="[[id]]" class="[[place]] [[hand]]">
         [[content]]
      </span> 
       <pb-popover theme="material" for="[[id]]">
                      <p>
                        <span style="font-style: italic;">
                          <pb-i18n key="[[key]]">
                            key not found: [[key]]
                          </pb-i18n></span>
                        <span style="font-style: italic;">
                         ( <pb-i18n key="[[erased]]">
                            key not found: [[erase]]
                          </pb-i18n>)</span>
                      </p>
          </pb-popover></pb:template>
        </model>
                    <model predicate="not(del) and anchor[@corresp]" behaviour="inline">
            <param name="place" value="@place"/>
            <param name="hand" value="if(@hand) then (concat('hand ', substring-after(@hand, '#'))) else ()"/>
            <param name="highlightKey" value="substring-after(anchor[1]/@corresp, '#')"/>
            <param name="id" value="replace(@corresp, '#','')"/>
            <param name="key" value="concat(&#34;myapp.hand.&#34;, replace(@hand, '#',''))"/>
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><pb-highlight key="[[highlightKey]]" duration="5000"><span id="[[id]]" class="[[place]] [[hand]]">
         [[content]]
      </span></pb-highlight> 
       <pb-popover theme="material" for="[[id]]">
                      <p>
                        <span style="font-style: italic;">
                          <pb-i18n key="[[key]]">
                            key not found: [[key]]
                          </pb-i18n></span>
                      </p>
          </pb-popover></pb:template>
        </model>
                    <model predicate="not(del)" behaviour="inline">
            <param name="place" value="@place"/>
            <param name="hand" value="replace(@hand, '#', '')"/>
            <param name="id" value="replace(@corresp, '#','')"/>
            <param name="key" value="concat(&#34;myapp.hand.&#34;, replace(@hand, '#',''))"/>
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><span id="[[id]]" class="[[place]] [[hand]]">
         [[content]]
      </span> 
       <pb-popover theme="material" for="[[id]]">
                      <p>
                        <span style="font-style: italic;">
                          <pb-i18n key="[[key]]">
                            key not found: [[key]]
                          </pb-i18n></span>
                      </p>
          </pb-popover></pb:template>
        </model>
    </elementSpec>
    <elementSpec ident="div" mode="change">
        <model predicate="@type='changeInfo' and change" behaviour="pass-through">
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><div class="changeInfoPage"> 
            <pb-collapse opened="opened" emit="transcription">
                    <span slot="collapse-trigger">
                <h2><pb-i18n key="myapp.menu.changes">Bearbeitungsschritte</pb-i18n></h2>
                </span>
                 <span slot="collapse-content">
                <ul>[[content]]</ul>
                 </span>
                </pb-collapse>
                </div>
            </pb:template>
        </model>
                    <model predicate="@type='pageInfo' and (msContents or physDesc or additions or handNotes)" behaviour="pass-through" cssClass="pageInfo">
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><div class="pageInfo">
                <pb-collapse opened="opened" emit="transcription">
                    <span slot="collapse-trigger">
                        <h2><pb-i18n key="myapp.menu.pageInfo">Seiteninformationen</pb-i18n></h2>
                    </span>
                    <span slot="collapse-content">
                        <ul>[[content]]</ul>
                    </span>
                </pb-collapse>
            </div></pb:template>
        </model>
                    <model predicate="@type='noteDiv' and app" behaviour="pass-through" cssClass="noteDiv">
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><div class="noteDiv"> 
              <pb-collapse opened="opened" emit="transcription">
                    <span slot="collapse-trigger">
                <h2><pb-i18n key="myapp.menu.appNotes">Anmerkungen</pb-i18n></h2>
                 </span>
                 <span slot="collapse-content">
                [[content]]
                  </span>
                </pb-collapse>
                </div></pb:template>
        </model>
                    <model predicate="@type='title_page'" behaviour="block">
            <outputRendition xml:space="preserve">
            border: 1px solid black; padding: 5px;
            </outputRendition>
        </model>
                    <model predicate="parent::body or parent::front or parent::back" behaviour="section"/>
                    <model behaviour="block"/>
                </elementSpec>
        <elementSpec ident="app" mode="add">
                    <model predicate="@from and @to and lem and note" behaviour="pass-through">
            <param name="target" value="substring-after(@from, '#')"/>
            <param name="targetEnd" value="substring-after(@to, '#')"/>
            <param name="line" value="id(substring-after(@from, '#'), $parameters?root)/@n"/>
            <param name="lineEnd" value="id(substring-after(@to, '#'), $parameters?root)/@n"/>
            <param name="lem" value="lem[1]"/>
            <param name="note" value="note[1]/text()"/>
            <pb:template xmlns="" xml:space="preserve"><div><pb-highlight key="[[target]]" highlight-self="highlight-self" duration="5000"><span style="color: blue;">[[line]]</span></pb-highlight>-<pb-highlight key="[[targetEnd]]" highlight-self="highlight-self" duration="5000"><span style="color: blue;">[[lineEnd]]</span></pb-highlight>: <span style="margin-left: 2px;">[[lem]]</span><span style="margin-right: 0.5em;">]</span><span class="note">[[note]]</span> </div></pb:template>
        </model>
                    <model predicate="@from and lem and note" behaviour="pass-through">
            <param name="target" value="substring-after(@from, '#')"/>
            <param name="line" value="id(substring-after(@from, '#'), $parameters?root)/@n"/>
            <param name="lem" value="lem[1]"/>
            <param name="note" value="note[1]/node()"/>
            <pb:template xmlns="" xml:space="preserve"><div><pb-highlight key="[[target]]" highlight-self="highlight-self" duration="5000"><span style="color: blue;">[[line]]</span></pb-highlight>: <span style="margin-left: 2px;">[[lem]]</span><span style="margin-right: 0.5em;">]</span><span class="note">[[note]]</span> </div></pb:template>
        </model>
                    <model predicate="@corresp and @loc and lem and note" behaviour="pass-through">
            <param name="target" value="substring-after(@corresp, '#')"/>
            <param name="line" value="@loc"/>
            <param name="lem" value="lem[1]"/>
            <param name="note" value="note[1]/text()"/>
            <pb:template xmlns="" xml:space="preserve"><div><pb-highlight key="[[target]]" highlight-self="highlight-self" duration="5000"><span style="color: blue;">[[line]]</span></pb-highlight>: <span style="margin-left: 2px;">[[lem]]</span><span style="margin-right: 0.5em;">]</span><span class="note">[[note]]</span> </div></pb:template>
        </model>
                    <model predicate="@from and note" behaviour="pass-through">
            <param name="line" value="id(substring-after(@from, '#'), $parameters?root)/@n"/>
            <param name="note" value="note[1]/text()"/>
            <param name="target" value="substring-after(@from, '#')"/>
            <pb:template xmlns="" xml:space="preserve"><div><pb-highlight key="[[target]]" highlight-self="highlight-self" duration="5000"><span style="color: blue;">[[line]]</span></pb-highlight>: <span class="note">[[note]]</span> </div></pb:template>
        </model>
                    <model behaviour="pass-through">
            <param name="target" value="substring-after(rdg[@wit='#Dm']/@source, '#')"/>
            <param name="line" value="rdg[@wit='#Dm']/@n"/>
            <param name="rdg" value="rdg[@wit='#Dm']/(*|text())"/>
            <param name="content" value="if (rdg[@wit='#Ed']) then (rdg[not(@wit='#Dm')]) else ((lem|rdg[not(@wit='#Dm')]))"/>
            <pb:template xmlns="" xml:space="preserve"><div><pb-highlight key="[[target]]" highlight-self="highlight-self" duration="5000"><span style="color: blue;">[[line]]</span></pb-highlight>: <span style="margin-left: 2px;">[[rdg]]</span><span style="margin-right: 0.5em;">]</span><span>[[content]]</span> </div></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="lem" mode="add">
                    <model predicate="parent::app[@corresp]" behaviour="pass-through">
            <param name="target" value="substring-after(parent::app/@corresp, '#')"/>
            <pb:template xmlns="" xml:space="preserve"><pb-highlight key="[[target]]" highlight-self="highlight-self" duration="5000">[[content]]</pb-highlight></pb:template>
        </model>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="rdg" mode="add">
                    <model behaviour="pass-through">
            <param name="content" value="."/>
            <param name="ref" value="if (@n) then (concat(replace(substring-after(@wit, '#'), ' #', '/'), ' ', @n)) else (replace(substring-after(@wit, '#'), ' #', '/'))"/>
            <pb:template xmlns="" xml:space="preserve"><span style="margin-right: 0.5em;">[[content]] ([[ref]])</span></pb:template>
        </model>
                </elementSpec>
        <elementSpec ident="node()" mode="add"/>
        <elementSpec ident="choice" mode="change">
                    <model predicate="@corresp and sic and orig" behaviour="pass-through">
            <param name="sic" value="sic[1]"/>
            <param name="corr" value="corr[1]"/>
            <param name="orig" value="orig[1]"/>
            <param name="choiceCls" value="if ($parameters?choice = 'off') then () else ('choice')"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover theme="material">
  <span slot="default" class="[[choiceCls]] choiceParent">[[orig]]</span>
  <template slot="alternate"><p>[[sic]] &gt; [[corr]]</p></template>
</pb-popover></pb:template>
        </model>
                    <model predicate="@corresp and sic and corr" behaviour="pass-through">
            <param name="sic" value="sic[1]"/>
            <param name="corr" value="corr[1]"/>
            <param name="choiceCls" value="if ($parameters?choice = 'off') then () else ('choice')"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover theme="material">
  <span slot="default" class="[[choiceCls]] choiceParent">[[sic]]</span>
  <template slot="alternate"><p class="sicCor">[[sic]] &gt; [[corr]]</p></template>
</pb-popover></pb:template>
        </model>
                    <model predicate="sic and cor" behaviour="pass-through">
            <param name="corr" value="corr[1]"/>
            <param name="sic" value="sic[1]"/>
            <pb:template xmlns="" xml:space="preserve"><p class="test">[[sic]] &gt; [[corr]]</p></pb:template>
        </model>
                    <model predicate="abbr and reg" behaviour="alternate">
            <param name="default" value="abbr[1]"/>
            <param name="alternate" value="reg[1]"/>
        </model>
                    <model predicate="orig and reg" behaviour="alternate">
            <param name="default" value="reg[1]"/>
            <param name="alternate" value="orig[1]"/>
        </model>
                </elementSpec>
                <elementSpec ident="sic" mode="change">
                    <model predicate="parent::choice and count(parent::*/*) gt 1" behaviour="inline"/>
                    <model behaviour="inline" cssClass="sic"/>
                </elementSpec>
                <elementSpec ident="element()" mode="add"/>
                <elementSpec ident="anchor" mode="change">
                    <model predicate="preceding::index[1]/@spanTo = concat('#', @xml:id)" behaviour="pass-through">
            <param name="content" value="let $start := . return $start/preceding-sibling:: node()[preceding::index[@spanTo = concat('#', $start/@xml:id)]]"/>
            <param name="alternate" value="let $start := . return id(substring-after(preceding::index[@spanTo = concat('#', $start/@xml:id)]/@corresp, '#'), root($parameters?root))"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover theme="material">
  <span slot="default" class="choice">[[content]]</span>
  <template slot="alternate"><p>[[alternate]]</p></template>
</pb-popover></pb:template>
        </model>
                </elementSpec>
            <elementSpec ident="retrace" mode="add">
                    <model behaviour="pass-through">
            <param name="hand" value="if(@hand) then (concat('hand ', substring-after(@hand, '#'))) else ()"/>
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><span class="retrace [[hand]]">[[content]]</span></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="seg" mode="change">
                    <model predicate="@corresp" behaviour="pass-through" useSourceRendition="true">
            <param name="target" value="substring-after(@corresp, '#')"/>
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><pb-highlight key="[[target]]" highlight-self="highlight-self" duration="5000">[[content]]</pb-highlight></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="term" mode="add">
                    <model predicate="@type='lem' and @target" behaviour="pass-through">
            <param name="id" value="substring-after(@target, '#')"/>
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><span class="term highlightTarget"><pb-highlight key="[[id]]" highlight-self="highlight-self" duration="5000">[[content]]</pb-highlight> ]</span></pb:template>
        </model>
                    <model predicate="@type='lem'" behaviour="pass-through">
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><span class="term">[[content]] ]</span></pb:template>
        </model>
                    <model predicate="@target" behaviour="pass-through">
            <param name="id" value="substring-after(@target, '#')"/>
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><pb-highlight key="[[id]]" highlight-self="highlight-self" duration="5000"><span class="term highlightTarget">[[content]]</span></pb-highlight></pb:template>
        </model>
                    <model predicate="@corresp" behaviour="pass-through">
            <param name="id" value="substring-after(@corresp, '#')"/>
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><pb-highlight key="[[id]]" duration="5000">[[content]]</pb-highlight></pb:template>
        </model>
                    <model behaviour="inline" cssClass="term"/>
                </elementSpec>
            <elementSpec ident="msContents" mode="add">
                    <model behaviour="listItem"/>
                </elementSpec>
                <elementSpec ident="physDesc" mode="add">
                    <model behaviour="listItem"/>
                </elementSpec>
                <elementSpec ident="additions" mode="add">
                    <model behaviour="listItem"/>
                </elementSpec>
                <elementSpec ident="handNotes" mode="add">
                    <model behaviour="listItem"/>
                </elementSpec>
            <elementSpec ident="space" mode="add">
                    <model predicate="@unit=&#34;char&#34; and @quantity" behaviour="pass-through">
            <param name="marginStyle" value="let $quantity := number(@quantity) div 4 return concat('margin-right: ', $quantity, 'em;')"/>
            <pb:template xmlns="" xml:space="preserve"><span style="[[marginStyle]]"/></pb:template>
        </model>
                </elementSpec>
    <elementSpec ident="ref" mode="change">
        <model predicate="@target and parent::desc" behaviour="pass-through">
            <param name="id" value="substring-after(@target, '#')"/>
            <param name="content" value="."/>
            <param name="note" value="id(substring-after(@target, '#'), root($parameters?root))/note/node()"/>
             <param name="style" value="if (contains(@target, 'black') or contains(@target, 'brown')) then ('background-color: white;') else ()"/>
            <pb:template xmlns="" xml:space="preserve"><span id="[[id]]" class="info trigger popover">[[content]]</span><pb-popover for="[[id]]" theme="material" placement="left">
            <span class="[[id]]" style="[[style]]">[[content]]</span>
            <p>[[note]]</p></pb-popover></pb:template>
        </model>
                    <model predicate="@target" behaviour="pass-through">
            <param name="id" value="substring-after(@target, '#')"/>
            <param name="content" value="."/>
            <param name="url" value="substring-before(@target, '#')"/>
            <pb:template xmlns="" xml:space="preserve"><pb-link xml-id="[[id]]" path="[[url]]">[[content]]</pb-link></pb:template>
        </model>
                    <model behaviour="inline"/>
                </elementSpec>
    <elementSpec ident="title" mode="change">
                    <model predicate="$parameters?header='short' and $parameters?type='timeline'" behaviour="pass-through">
            <param name="title" value="substring-before(., '.')"/>
            <pb:template xmlns="" xml:space="preserve"><h5 class="tei-title1"><pb-i18n style="font-style: italic;" key="myapp.menu.timeline">...Zeitstrahl...</pb-i18n>: [[title]]</h5></pb:template>
        </model>
                    <model predicate="$parameters?header='short'" behaviour="heading">
            <param name="level" value="5"/>
        </model>
                    <modelSequence predicate="parent::titleStmt/parent::fileDesc">
            <model predicate="preceding-sibling::title" behaviour="text">
                <param name="content" value="' â '"/>
            </model>
            <model behaviour="inline"/>
        </modelSequence>
                    <model predicate="not(@level) and parent::bibl" behaviour="inline"/>
                    <modelSequence predicate="@level='m' or not(@level)">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="ancestor::biblFull" behaviour="text">
                <param name="content" value="', '"/>
            </model>
        </modelSequence>
                    <modelSequence predicate="@level='s' or @level='j'">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="following-sibling::* and     (  ancestor::biblFull)" behaviour="text">
                <param name="content" value="', '"/>
            </model>
        </modelSequence>
                    <modelSequence predicate="@level='u' or @level='a'">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="following-sibling::* and     (    ancestor::biblFull)" behaviour="text">
                <param name="content" value="'. '"/>
            </model>
        </modelSequence>
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                </elementSpec>
    <elementSpec ident="change" mode="add">
        <model predicate="parent::div[@type='changeInfo']" behaviour="pass-through">
            <param name="id" value="@xml:id"/>
            <param name="source" value="substring-after(parent::div/@source, '#')"/>
            <param name="content" value="."/>
            <param name="date" value="date/text()"/>
            <pb:template xmlns="" xml:space="preserve">
                <li><pb-popover theme="material" placement="left" data-debug="0">
                    <span slot="default"><a href="?template=timeline.html#[[id]]">[[date]]</a> <pb-load src="document1" url="api/handNote4change/[[id]]/[[source]]" silent="silent" auto="auto" emit="transcription" load-once="load-once"/></span>
                    <span slot="alternate">[[content]]</span>
                </pb-popover></li>
            </pb:template>
        </model>
       
        <model behaviour="pass-through">
            <param name="id" value="@xml:id"/>
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><div id="[[id]]" class="change">
    <div class="changeContent">[[content]]</div>
    <pb-load src="document1" url="api/letters/[[id]]" auto="auto" emit="timeline"/>
    <pb-load src="document1" url="api/page4change/[[id]]" auto="auto" emit="timeline"/>
</div></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="div1" mode="add"/>
    <elementSpec ident="handNote" mode="add">
        <model behaviour="pass-through">
            <param name="content" value="."/>
            <param name="id" value="@xml:id"/>
            <param name="style" value="if (contains(@xml:id, 'black') or contains(@xml:id, 'brown')) then ('background-color: white;') else ()"/>
            <param name="note" value="note[1]"/>
            <pb:template xmlns="" xml:space="preserve">
                <span id="[[id]]" class="trigger popover">[[content]]</span>
                <pb-popover theme="material" for="[[id]]" placement="left">
                    <span class="[[id]]" style="[[style]]">[[content]]</span>
                    <p>[[note]]</p>
                </pb-popover>
            </pb:template>
        </model>
    </elementSpec>
            </schemaSpec>
        </body>
    </text>
</TEI>