<?xml-model href="teipublisher_odds.xsd"?><TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" xml:lang="en"><teiHeader><fileDesc>
            <titleStmt><title>Surface</title></titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify
                        it under the terms of the GNU General Public License as published by
                        the Free Software Foundation, either version 3 of the License, or
                        (at your option) any later version.</p>
                    <p>This program is distributed in the hope that it will be useful,
                        but WITHOUT ANY WARRANTY; without even the implied warranty of
                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        GNU General Public License for more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Generated by <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc><encodingDesc><tagsDecl><rendition source="surface.css"/></tagsDecl></encodingDesc><revisionDesc>
            <change when="2023-12-13+01:00">Initial version</change>
        </revisionDesc></teiHeader><text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="surface" source="teipublisher.odd"> 
                <elementSpec ident="pb" mode="change"/>
                <elementSpec ident="hi" mode="change"><model predicate="@rend='underline'" behaviour="inline"/><model predicate="@rend='doubleUnderline'" behaviour="inline"/><model predicate="@rend='latin'" behaviour="pass-through">
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><span class="latin">[[content]]</span></pb:template>
        </model></elementSpec>
                <elementSpec ident="note" mode="change"><model behaviour="omit"/></elementSpec>
                <elementSpec ident="noteGrp" mode="add"/>
            <elementSpec ident="lb" mode="change"/>
                <elementSpec ident="p" mode="change"/>
                <elementSpec ident="sourceDoc" mode="add"/>
                <elementSpec ident="text" mode="change"/>
                <elementSpec ident="div2" mode="add"/>
                <elementSpec ident="body" mode="change"/>
                <elementSpec ident="surface" mode="add"><model predicate="@type='relative'" behaviour="body">
            <param name="content" value="."/>
            <param name="id" value="@xml:id"/>
            <param name="pb" value="replace(@start, '#', '')"/>
            <param name="style" value="@style"/>
            <pb:template xmlns="" xml:space="preserve">
                            <h1>Diplomatische Transkription [[pb]]</h1>
                           
                            <div id="[[id]]" class="transkriptionField" style="[[style]]">
                                [[content]]
                            </div>
                        </pb:template>
        </model></elementSpec>
                <elementSpec ident="line" mode="add"><model predicate="ends-with(parent::zone/@type, 'Block') and parent::zone/parent::surface" behaviour="pass-through">
            <param name="id" value="@xml:id"/>
            <param name="style" value="@style"/>
            <param name="n" value="@n"/>
            <param name="hand" value="@hand"/>
            <param name="rend" value="@rend"/>
            <pb:template xmlns="" xml:space="preserve"><div id="[[id]]" class="line" style="[[style]]">
  <span class="lnr">[[n]]:</span>
  <span class="[[hand]] [[rend]]" style="[[spanStyle]]">[[content]]</span>
</div></pb:template>
        </model><model predicate="parent::zone/parent::zone and not(ends-with(parent::zone/@type, 'Block'))" behaviour="pass-through">
            <param name="n" value="@n"/>
            <param name="style" value="@style"/>
            <param name="id" value="@xml:id"/>
            <param name="content" value="."/>
            <param name="isMarginLeft" value="if (contains(parent::zone/@type, 'zone')) then ('marginLeft') else ()"/>
            <param name="spanStyle" value="parent::zone/@style"/>
            <param name="hand" value="@hand"/>
            <param name="rend" value="@rend"/>
            <pb:template xmlns="" xml:space="preserve"><div id="[[id]]" class="zoneLine" style="[[style]]">
  <span class="lnr">[[n]]:</span>
  <span class="[[isMarginLeft]] [[hand]] [[rend]]" style="[[spanStyle]]">[[content]]</span>
</div></pb:template>
        </model></elementSpec>
            <elementSpec ident="zone" mode="add"><model predicate="parent::line and not(ends-with(@type, 'Block'))" behaviour="pass-through">
            <param name="id" value="@xml:id"/>
            <param name="content" value="."/>
            <param name="class" value="@type"/>
            <param name="style" value="@style"/>
            <pb:template xmlns="" xml:space="preserve"><span id="[[id]]" style="[[style]]" class="[[class]]">
  [[content]]
</span></pb:template>
        </model><model predicate="@xml:id and (empty(@type) or ends-with(@type, 'Block'))" behaviour="pass-through">
            <param name="zone" value="substring-after(@start, '#')"/>
            <param name="style" value="@style"/>
            <param name="class" value="if (ends-with(@type,'Block') and not(starts-with(@type, 'text'))) then (concat(@type, ' textBlock')) else (@type)"/>
            <param name="content" value="."/>
            <param name="id" value="@xml:id"/>
            <pb:template xmlns="" xml:space="preserve"><div id="[[id]]" style="[[style]]" class="[[class]]" debug-msg="test">
  [[content]]
</div></pb:template>
        </model><model predicate="parent::zone and not(ends-with(@type, 'Block')) and line" behaviour="pass-through">
            <param name="id" value="@xml:id"/>
            <param name="class" value="@type"/>
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><div id="[[id]]" class="[[class]]">
  [[content]]
</div></pb:template>
        </model><model predicate="parent::zone and not(ends-with(@type, 'Block')) and not(line)" behaviour="pass-through">
            <param name="id" value="@xml:id"/>
            <param name="class" value="@type"/>
            <param name="content" value="."/>
            <param name="style" value="@style"/>
            <pb:template xmlns="" xml:space="preserve"><div id="[[id]]" class="[[class]]" style="[[style]]">
  [[content]]
</div></pb:template>
        </model></elementSpec>
            <elementSpec ident="add" mode="change"><model predicate="@place = 'superimposed' and parent::fw" behaviour="omit">
            <param name="id" value="replace(@corresp, '#', '')"/>
            <param name="hand" value="@hand"/>
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><span class="trigger popover" id="[[id]]"><span class="[[hand]]">[[content]]</span></span></pb:template>
        </model><model predicate="@place = 'superimposed' and add[@place='superimposed']" behaviour="pass-through">
            <param name="style" value="if (preceding-sibling::del[1]/@cause = @corresp and ((preceding-sibling::del[1]/preceding-sibling::*[1]/preceding-sibling::text()[1] = preceding-sibling::del[1]/preceding-sibling::text()[1] and not(matches(preceding-sibling::del[1]/preceding-sibling::*[1]/., '.*\s$')))) or (preceding-sibling::del[1]/preceding-sibling::*[1]/following-sibling::text()[1] = preceding-sibling::del[1]/preceding-sibling::text()[1] and not(matches(preceding-sibling::del[1]/preceding-sibling::text()[1], '.*\s$')))) then ('margin-left: -0.2em;') else ()"/>
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><span style="[[style]]">[[content]]</span></pb:template>
        </model><model predicate="@place = 'superimposed'" behaviour="pass-through">
            <param name="id" value="replace(@corresp, '#', '')"/>
            <param name="hand" value="replace(@hand, '#', '')"/>
            <param name="content" value="."/>
            <param name="style" value="if (preceding-sibling::del[1]/@cause = @corresp and ((preceding-sibling::del[1]/preceding::*[1]/preceding-sibling::text()[1] = preceding-sibling::del[1]/preceding-sibling::text()[1] and not(matches(preceding-sibling::del[1]/preceding-sibling::*[1]/., '.*\s$')))) or ((count(preceding-sibling::del[1]/preceding-sibling::*) eq 0 or preceding-sibling::del[1]/preceding-sibling::*[1]/following-sibling::text()[1] = preceding-sibling::del[1]/preceding-sibling::text()[1]) and not(matches(preceding-sibling::del[1]/preceding-sibling::text()[1], '.*\s$')))) then ('margin-left: -0.2em;') else ()"/>
            <pb:template xmlns="" xml:space="preserve"><span class="trigger popover" id="[[id]]" style="[[style]]" data-debug="[[debug]]"><span class="[[hand]]">[[content]]</span></span></pb:template>
        </model><model predicate="parent::metamark[following-sibling::del/@cause = concat('#', @xml:id) or preceding-sibling::del/@cause = concat('#', @xml:id)] and (@place='above' or @place='below')" behaviour="pass-through">
            <param name="metamarkClass" value="if (parent::metamark/@rend) then (concat(parent::metamark/@rend, 'insertion-', @place)) else (concat('insMinsertion-', @place))"/>
            <param name="metamarkStyle" value="parent::metamark/@style"/>
            <param name="hand" value="@hand"/>
            <param name="class" value="@place"/>
            <param name="style" value="@style"/>
            <param name="content" value="."/>
            <param name="id" value="parent::metamark/@xml:id"/>
            <param name="overwritten" value="if(parent::metamark/following-sibling::del[1]/@cause = concat('#', parent::metamark/@xml:id)) then (parent::metamark/following-sibling::del[1]/text()) else (parent::metamark/preceding-sibling::del[1]/text())"/>
            <pb:template xmlns="" xml:space="preserve"><span class="trigger popover" id="[[id]]">[[overwritten]]</span><span class="[[metamarkClass]] [[hand]]" style="[[metamarkStyle]]">
  <span class="[[class]]" style="[[style]]">[[content]]</span>
</span></pb:template>
        </model><model predicate="parent::metamark and (@place='above' or @place='below')" behaviour="pass-through">
            <param name="metamarkClass" value="if (parent::metamark/@rend) then (concat(parent::metamark/@rend, 'insertion-', @place)) else (concat('insMinsertion-', @place))"/>
            <param name="metamarkStyle" value="parent::metamark/@style"/>
            <param name="hand" value="@hand"/>
            <param name="class" value="@place"/>
            <param name="style" value="@style"/>
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><span class="[[metamarkClass]] [[hand]]" style="[[metamarkStyle]]">
  <span class="[[class]]" style="[[style]]">[[content]]</span>
</span></pb:template>
        </model><model predicate="not(parent::metamark) and (@place='above' or @place='below')" behaviour="pass-through">
            <param name="hand" value="@hand"/>
            <param name="parentClass" value="concat('insertion-', @place)"/>
            <param name="class" value="@place"/>
            <param name="style" value="@style"/>
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><span class="[[parentClass]] [[hand]]">
  <span class="[[class]]" style="[[style]]">[[content]]</span>
</span></pb:template>
        </model></elementSpec>
                <elementSpec ident="subst" mode="add"/>
            <elementSpec ident="metamark" mode="add"><model predicate="@target" behaviour="inline">
            <param name="content" value="."/>
            <param name="target" value="concat(replace(@target[1], '#', ''), replace(@corresp, '#', ''))"/>
            <pb:template xmlns="" xml:space="preserve"><pb-highlight key="target" highlight-self="highlight-self" duration="5000">[[content]]</pb-highlight></pb:template>
        </model></elementSpec><elementSpec ident="del" mode="change"><model predicate=" (@rend = 'erased' or @rend = 'overwritten') and parent::fw" behaviour="pass-through" cssClass="popover">
            <param name="id" value="replace(@cause, '#', '')"/>
            <param name="key" value="concat('myapp.',@rend)"/>
            <param name="alternate" value="."/>
            <param name="place" value="replace(parent::fw/@place, '#','')"/>
            <param name="hand" value="replace(parent::fw/@hand, '#','')"/>
            <param name="content" value="parent::fw/add[@place=&#34;superimposed&#34;]/text()"/>
            <param name="parentKey" value="concat('myapp.',replace(parent::fw/@hand, '#',''))"/>
            <pb:template xmlns="" xml:space="preserve"><span id="[[id]]" class="[[place]] [[hand]] trigger popover">
         [[content]]
      </span> 
<pb-popover theme="material" for="[[id]]"><p>
                    <span style="font-style: italic; margin: 2px;">
                          (<pb-i18n key="[[parentKey]]">
                            key not found: [[parentKey]]
                          </pb-i18n>)</span>
                        <span style="font-style: italic;">
                          <pb-i18n key="[[key]]">
                            überschrieben
                          </pb-i18n>:</span>
                        <span class="transkriptionField small [[hand]]">[[alternate]]</span></p></pb-popover></pb:template>
        </model><model predicate=" (@rend = 'erased' or @rend = 'overwritten') and parent::add[@place='superimposed']" behaviour="pass-through" cssClass="popover">
            <param name="id" value="replace(@cause, '#', '')"/>
            <param name="key" value="concat('myapp.',@rend)"/>
            <param name="alternate" value="."/>
            <param name="hand" value="replace(@hand, '#','')"/>
            <param name="under" value="parent::add/preceding::del[@cause][1]/text()"/>
            <param name="underKey" value="concat('myapp.',parent::add/preceding::del[@cause][1]/@rend)"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover theme="material" for="[[id]]"><p>
                        <span style="font-style: italic;">
                          <pb-i18n key="[[key]]">
                            überschrieben
                          </pb-i18n>:</span>
                        <span style="margin-left: 10px; margin-right: 10px;" class="transkriptionField small [[hand]]">[[alternate]]</span> 
   <pb-i18n key="[[underKey]]">key not found: [[underKey]]</pb-i18n>: 
                        <span style="margin-left: 10px;" class="transkriptionField small [[hand]]">[[under]]</span> 
 
</p></pb-popover></pb:template>
        </model><model predicate=" (@rend = 'erased' or @rend = 'overwritten')" behaviour="pass-through" cssClass="popover">
            <param name="id" value="replace(@cause, '#', '')"/>
            <param name="key" value="concat('myapp.',@rend)"/>
            <param name="alternate" value="."/>
            <param name="hand" value="replace(@hand, '#','')"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover theme="material" for="[[id]]"><p>
                        <span style="font-style: italic;">
                          <pb-i18n key="[[key]]">
                            überschrieben
                          </pb-i18n>:</span>
                        <span class="transkriptionField small [[hand]]">[[alternate]]</span></p></pb-popover></pb:template>
        </model><model predicate="@rend" behaviour="inline"/><model behaviour="inline" cssClass="strikethrough"/></elementSpec><elementSpec ident="substJoin" mode="add"><model predicate="following::add/@place = 'superimposed' and following::del and not(parent::fw) and not(matches(preceding::text()[1], '.*\s$'))" behaviour="inline">
            <outputRendition xml:space="preserve">
            margin-left: -0.2em;
            </outputRendition>
        </model></elementSpec><elementSpec ident="index" mode="add"><model behaviour="omit"/></elementSpec><elementSpec ident="text()" mode="add"/><elementSpec ident="fw" mode="change"><model predicate="not(del[@cause])" behaviour="inline">
            <param name="place" value="@place"/>
            <param name="hand" value="replace(@hand, '#', '')"/>
            <param name="id" value="replace(@corresp, '#','')"/>
            <param name="key" value="concat(&#34;myapp.&#34;, replace(@hand, '#',''))"/>
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><span id="[[id]]" class="[[place]] [[hand]]">
         [[content]]
      </span> 
       <pb-popover theme="material" for="[[id]]">
                      <p>
                        <span style="font-style: italic;">
                          <pb-i18n key="[[key]]">
                            key not found: [[key]]
                          </pb-i18n></span>
                      </p>
          </pb-popover></pb:template>
        </model></elementSpec></schemaSpec>
        </body>
    </text></TEI>